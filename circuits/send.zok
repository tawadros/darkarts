from "./nullifierHasher" import main as nullifierHasher
from "./idChecker" import main as idChecker
from "./commitmentHasher" import main as commitmentHasher
from "./merkleTree" import main as merkleTree

def main(field oldRootDigest, field oldNullifierHash, field newCommitment, private field oldNullifier, private field oldSecretId, private field oldTokenUidId, private field oldTokenUidContract, private field[20] oldPathDigest, private bool[20] oldDirectionSelector, private field newNullifier, private field newPublicId, private field newTokenUidId, private field newTokenUidContract):
    // Old nullifierHash is well formed
    field oldNullifierHashResult = nullifierHasher(oldNullifier)
    assert(oldNullifierHashResult == oldNullifierHash)
    
    // Old publicId is paired with the correct secretId
    field oldPublicId = idChecker(oldSecretId)

    // Old commitment is well formed
    field oldCommitment = commitmentHasher(oldNullifier, oldPublicId, oldTokenUidId, oldTokenUidContract)

    // Old commitment appears on the ledger
    field oldRootDigestResult = merkleTree(oldCommitment, oldPathDigest, oldDirectionSelector)
    assert(oldRootDigestResult == oldRootDigest)

    // New commitment is well formed
    field newCommitmentResult = commitmentHasher(newNullifier, newPublicId, newTokenUidId, newTokenUidContract)
    assert(newCommitmentResult == newCommitment)

    // Old commitment token uid == new commitment token uid
    assert(oldTokenUidContract == newTokenUidContract)
    assert(oldTokenUidId == newTokenUidId)

    return
