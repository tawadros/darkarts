from "./1to1mimc" import main as oneToOneMimc
from "./4to1mimc" import main as fourToOneMimc
from "./merkleTree" import main as merkleTree

def main(field oldRootDigest, field oldNullifierHash, field newCommitment, private field oldSecretId, private field oldNullifier, private field oldTokenContract, private field oldTokenId, private field[20] oldPathDigest, private bool[20] oldDirectionSelector, private field newPublicId, private field newNullifier, private field newTokenContract, private field newTokenId):
    // Old nullifierHash is well formed
    field oldNullifierHashResult = oneToOneMimc(oldNullifier)
    assert(oldNullifierHashResult == oldNullifierHash)
    
    // Old publicId is paired with the correct secretId
    field oldPublicId = oneToOneMimc(oldSecretId)

    // Old commitment is well formed
    field oldCommitment = fourToOneMimc(oldPublicId, oldNullifier, oldTokenContract, oldTokenId)

    // Old commitment appears on the ledger
    field oldRootDigestResult = merkleTree(oldCommitment, oldPathDigest, oldDirectionSelector)
    assert(oldRootDigestResult == oldRootDigest)

    // New commitment is well formed
    field newCommitmentResult = fourToOneMimc(newPublicId, newNullifier, newTokenContract, newTokenId)
    assert(newCommitmentResult == newCommitment)

    // Old commitment token uid == new commitment token uid
    assert(oldTokenContract == newTokenContract)
    assert(oldTokenId == newTokenId)

    return
